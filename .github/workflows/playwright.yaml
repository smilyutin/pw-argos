name: Playwright Tests

on:
  push:
    branches: ["dev*", "main"]     # run on dev* and main pushes
  pull_request:
    branches: ["dev*", "main"]     # PRs targeting dev* or main
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: playwright-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-angular:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '16'        # Angular build on Node 16
          cache: 'npm'

      - name: Install Angular deps
        run: |
          set -e
          npm ci --legacy-peer-deps --no-audit --no-fund || \
          npm install --legacy-peer-deps --no-audit --no-fund

      - run: npx ng version

      - name: Build Angular (production)
        run: npx ng build --configuration production

      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  tests:
    runs-on: ubuntu-latest
    needs: [build-angular]
    env:
      # Playwright / test env
      NPM_CONFIG_AUDIT: "false"
      NPM_CONFIG_FUND: "false"
      PW_FORBID_ONLY: "1"
      QA_URL: http://localhost:4200
      QA_EXTERNAL_URL: 'https://www.globalsqa.com/demo-site/draganddrop/#Photo%20Manager'

      # Argos env (safe defaults)
      ARGOS_TOKEN: ${{ secrets.ARGOS_TOKEN || '' }}
      ARGOS_BRANCH: ${{ github.ref_name }}
      ARGOS_COMMIT: ${{ github.sha }}
      ARGOS_CI: github-actions
      ARGOS_PARALLEL_TOTAL: "1"
      ARGOS_PARALLEL_INDEX: "1"     # ← 1-based index (was 0)

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'        # Playwright requires >=18
          cache: 'npm'

      - name: Install test deps
        run: |
          set -e
          npm ci --legacy-peer-deps --no-audit --no-fund || \
          npm install --legacy-peer-deps --no-audit --no-fund

      - name: Defocus tests (remove .only)
        run: node scripts/strip-only.js

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      # Derive ARGOS_BASE_BRANCH (PR base branch; else main)
      - name: Set ARGOS_BASE_BRANCH
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ARGOS_BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> "$GITHUB_ENV"
          else
            echo "ARGOS_BASE_BRANCH=main" >> "$GITHUB_ENV"
          fi

      - name: Argos env summary
        run: |
          echo "ARGOS token set?: $([ -n \"$ARGOS_TOKEN\" ] && echo yes || echo no)"
          echo "ARGOS_BRANCH=$ARGOS_BRANCH"
          echo "ARGOS_BASE_BRANCH=$ARGOS_BASE_BRANCH"
          echo "ARGOS_COMMIT=$ARGOS_COMMIT"
          echo "ARGOS_CI=$ARGOS_CI"
          echo "ARGOS_PARALLEL_TOTAL=$ARGOS_PARALLEL_TOTAL ARGOS_PARALLEL_INDEX=$ARGOS_PARALLEL_INDEX"

      # Install Argos tooling leniently to avoid legacy peer-dep conflicts
      - name: Install Argos packages (lenient)
        if: ${{ env.ARGOS_TOKEN != '' }}
        run: |
          set -e
          export npm_config_legacy_peer_deps=true
          export npm_config_audit=false
          export npm_config_fund=false
          npm install -D --no-save @argos-ci/playwright @argos-ci/cli || \
          npm install -D --no-save --force @argos-ci/playwright @argos-ci/cli

      - name: Verify Argos reporter is resolvable
        if: ${{ env.ARGOS_TOKEN != '' }}
        run: node -e "console.log(require.resolve('@argos-ci/playwright')); console.log('Argos reporter RESOLVED ✅')"

      # Run tests (your code calls argosScreenshot(...) to create ./.argos-screenshots)
      - name: Playwright tests
        env:
          DEBUG: "argos:*"
        run: npx playwright test --reporter=line

      # Ensure 1-based defaults even if matrix/sharding is added later
      - name: Normalize Argos parallel env
        if: ${{ env.ARGOS_TOKEN != '' }}
        run: |
          echo "ARGOS_PARALLEL_TOTAL=${ARGOS_PARALLEL_TOTAL:-1}" >> "$GITHUB_ENV"
          echo "ARGOS_PARALLEL_INDEX=${ARGOS_PARALLEL_INDEX:-1}" >> "$GITHUB_ENV"

      # Upload screenshots to Argos (only when token present and dir exists)
      - name: Upload snapshots to Argos
        if: ${{ env.ARGOS_TOKEN != '' }}
        run: |
          if [ -d ".argos-screenshots" ]; then
            echo "Uploading $(find .argos-screenshots -type f | wc -l) snapshot(s)…"
            npx @argos-ci/cli upload ./.argos-screenshots \
              --branch "$ARGOS_BRANCH" \
              --commit "$ARGOS_COMMIT" \
              --base-branch "$ARGOS_BASE_BRANCH" \
              --parallel-total "${ARGOS_PARALLEL_TOTAL:-1}" \
              --parallel-index "${ARGOS_PARALLEL_INDEX:-1}"
          else
            echo "No ./.argos-screenshots directory found — skipping Argos upload."
          fi

      # Upload Playwright HTML report when something fails
      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report